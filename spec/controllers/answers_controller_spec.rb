require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AnswersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Answer. As you add validations to Answer, be sure to
  # adjust the attributes here as well.
  # let(:user) { user = FactoryGirl.create(:user) }
  let(:user) { User.find(answer.user_id) }
  let(:question) { question = FactoryGirl.create(:question) }
  let(:answer) { answer = FactoryGirl.create(:answer) }

  let(:valid_attributes) {
    FactoryGirl.build(:answer)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:answer, body: 'too short')
  }

=begin
  describe "GET #index" do
    it "returns a success response" do
      get :index, :question_id => answer.question_id
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, :question_id => answer.question, :id => answer.id
      expect(response).to be_success
    end
  end
=end 

  describe "GET #new" do
    it "returns a success response" do
      sign_in user
      get :new, question_id: question
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      # you need to sign in a user factory with many answers. but user has many answers through question, 
      # so the answer factory need to have a question_id and the question need to exist. 
      # configure the factory and test it through the console
      # or try to mock this test case so that the answer has the question 
      sign_in user
      get :edit, question_id: question, :id => answer.to_param
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Answer" do
        binding.pry
        expect {
          post :create, :question_id => valid_attributes.question_id, :answer => valid_attributes
        }.to change(Answer, :count).by(1)
      end

      it "redirects to the created answer" do
        post :create, {:answer => valid_attributes}, valid_session
        expect(response).to redirect_to(Answer.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, {:answer => invalid_attributes}, valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested answer" do
        put :update, {:id => answer.to_param, :answer => new_attributes}, valid_session
        answer.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the answer" do
        put :update, {:id => answer.to_param, :answer => valid_attributes}, valid_session
        expect(response).to redirect_to(answer)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        put :update, {:id => answer.to_param, :answer => invalid_attributes}, valid_session
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested answer" do
      expect {
        delete :destroy, {:id => answer.to_param}, valid_session
      }.to change(Answer, :count).by(-1)
    end

    it "redirects to the answers list" do
      delete :destroy, {:id => answer.to_param}, valid_session
      expect(response).to redirect_to(answers_url)
    end
  end

end
